{
  "users": [
    {
      "id": 1,
      "username": "creator1",
      "password": "scrypt:32768:8:1$mmGHq9IJQrf3j6wm$c6297bd65c5fe05e880690eb10b490f234909c434dc677672438ebca6df7fe5baf470d231612b8be8dffd4a96b162c6519c45dd68421954524e1523b8123ad1d",
      "role": "creator",
      "avatar": "static\\uploads\\avatar_1.jpg",
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 200,
      "api_token": null,
      "is_approved": 1,
      "full_name": null,
      "email": null,
      "phone": null,
      "institution": null,
      "payment_screenshot": null,
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": "static\\uploads\\logo_1.png"
    },
    {
      "id": 2,
      "username": "student1",
      "password": "scrypt:32768:8:1$RCmmOP5I5aq5wUu1$d7016471dea3185c21e50e65a779bc101f85230fdacdc77ff8e16723a6c28de4d5278d740495dba06642dc85d31e73426ba1e6beff838d7aa4e604a6eda77dec",
      "role": "student",
      "avatar": "static\\uploads\\avatar_2.jpg",
      "display_name": "izhar",
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 10,
      "api_token": null,
      "is_approved": 1,
      "full_name": null,
      "email": null,
      "phone": null,
      "institution": null,
      "payment_screenshot": null,
      "is_blocked": 1,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 3,
      "username": "student2",
      "password": "scrypt:32768:8:1$ygEKCJgwEZqsJZdt$0589560e55c4faf2d62f047754afc451e0df23a49914030a61181bc1e6748ab3717ce687a507f7556108427b0e47c37aae7c8b0b1a6db9a824f9e3f7216222cc",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": null,
      "email": null,
      "phone": null,
      "institution": null,
      "payment_screenshot": null,
      "is_blocked": 1,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 4,
      "username": "admin",
      "password": "scrypt:32768:8:1$1rmgicbAgzPoiKCQ$c56f92212b5ea11c043a39b6ebe0820e884fef02f1cedd234c5d4452a63fef6b4198a00515584f60240999abd37d0fc19739b313ff6a27177cc45f138dab329f",
      "role": "admin",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": null,
      "email": null,
      "phone": null,
      "institution": null,
      "payment_screenshot": null,
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 5,
      "username": "izhar",
      "password": "scrypt:32768:8:1$Q3Xhci7nxye5irMo$b07f0fab05674aba5c1870bef0064341ba055db5c70816d7a17c5796e55476642db9bb1b723747c8c41118ee8e09c7a13dad4082fe55757ce1f20814beb228d4",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "Izhar internship Jamali",
      "email": "izharjamali99@gmail.com",
      "phone": "+923335601786",
      "institution": "szabist",
      "payment_screenshot": null,
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 6,
      "username": "izhar2",
      "password": "scrypt:32768:8:1$S8PIcOzEN9KM9ONb$5481fecf09cf0464bdc9258769d8e09c95e31287a8f0e03ac3f8c0839c05b4f75b73b41264af0125305d69c505624129cc000d75881be5f527b4ab53e1c2ad5f",
      "role": "creator",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "Izhar Jamali",
      "email": "izharjamali99@gmail.com",
      "phone": "+923335601786",
      "institution": "szabist",
      "payment_screenshot": "static\\uploads\\payment_izhar2_1753713030.jpeg",
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": "static/uploads/logo_6.png"
    },
    {
      "id": 7,
      "username": "izhar3",
      "password": "scrypt:32768:8:1$clNcjB5ugeKjDcaw$99cc574d2e365c7e190d6efff77cbe70d451e9629ff79027858645e2c7ef2e890efd7b0448ea3dfc7c6470565fb91d5fa7ea712611f3f082d603b2b2f5956c41",
      "role": "creator",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "Izhar Jamali",
      "email": "izharjamali99@gmail.com",
      "phone": "+923335601786",
      "institution": "szabist",
      "payment_screenshot": "static\\uploads\\payment_izhar3_1753799140.jpeg",
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 8,
      "username": "danish",
      "password": "scrypt:32768:8:1$21Mw9lEcHugIBR1R$d59f1dad7afc142ac0f0c793a555ffbc56883e5ecb4cd2bb83b345c571083c167ebb62ff3c9d23a141abaf7082e4aa4edef7a327788e29abf7b421391d5ca0ba",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "danish",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": null,
      "is_blocked": 0,
      "created_at": "2025-07-30 10:47:23",
      "logo": null
    },
    {
      "id": 9,
      "username": "danish2",
      "password": "scrypt:32768:8:1$ZXQueaC0JMq460B4$35a20d3004a14d6ab8de710292f8420f33ba2042aedfce91f05f613cd2e4abcec32ca58d467130a75db3c052e3a6801a955c11ce5899a6f0de8df9afff62b2c2",
      "role": "creator",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 0,
      "full_name": "danish2",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": "static\\uploads\\payment_danish2_1753943047.jpeg",
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    },
    {
      "id": 10,
      "username": "danish4",
      "password": "scrypt:32768:8:1$kBlBVcCIl4Cd9raq$f04c7729d0526d7b1ebb201bf816fd2ff9bbbd256fbd0f53942ed3315059144169a721c8bd585b6ff7659c1235ce8b0dc4c7dc9483a2fc3f2324bcfc868cc978",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 0,
      "full_name": "danish4",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": null,
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    },
    {
      "id": 11,
      "username": "danish3",
      "password": "scrypt:32768:8:1$PbTxxeERzhBKDsrG$36d5b8f9691738b1556603af04cd026c0ece1fb6819414cba4a529cb6ba0106ed28ec7966a26e3d3631df2a7c3be45d63b4a1a4180f2e457c24b76f29250928d",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 0,
      "full_name": "danish",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": "payment_danish3_1754204800.jpeg",
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    },
    {
      "id": 12,
      "username": "student",
      "password": "scrypt:32768:8:1$cYWTQ4Q0JpxO7syf$00205e1883c0784b7c7095613a4f85d80e7634595214b8047261624fa94e2083dd614e6db21db633889a6fc21a53a5d49ca8522e1e7dbf503f9f3fead3683482",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "student",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": "payment_student_1754205435.jpeg",
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    },
    {
      "id": 13,
      "username": "student3",
      "password": "scrypt:32768:8:1$DDHyqDV16p9gmZMo$d763b1f7a5347bac3f9816f3307c5e5fc2720e7682f660826183a90117b478f4d9412d36e102cc011d6e7bb7d8137ea83edc1ee4bfdb67ca06b76fadc54a087e",
      "role": "student",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 1,
      "full_name": "student",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": "payment_student3_1754206448.jpeg",
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    },
    {
      "id": 14,
      "username": "naeem",
      "password": "scrypt:32768:8:1$93TvwLOdHoGh1uDR$beb53542ebeff89c046fe84826f6dd44fc8f980af933b8e78bd91cfafef861b7ace9fbadd5dc3d4a9a92354cbf36b87e9b4bce67fe0bb481675777520c1e1bda",
      "role": "creator",
      "avatar": null,
      "display_name": null,
      "bio": null,
      "notif_forum": 1,
      "notif_grades": 1,
      "notif_announcements": 1,
      "dark_mode": 0,
      "badges": null,
      "points": 0,
      "api_token": null,
      "is_approved": 0,
      "full_name": "naeem",
      "email": "danish@gmail.com",
      "phone": "1228822222",
      "institution": "szabist",
      "payment_screenshot": "static\\uploads\\payment_naeem_1754280038.jpeg",
      "is_blocked": 0,
      "created_at": null,
      "logo": null
    }
  ],
  "courses": [
    {
      "id": 1,
      "title": "Python Programming",
      "creator_id": 1,
      "description": "Learn Python basics and advanced concepts.",
      "reference_file_path": "uploads\\ref_1_app.py",
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": "fundamentals\r\ntools",
      "objectives": "learn fundamentals\r\nlearn tools",
      "created_at": "2025-07-30 10:47:23",
      "live_session_start": "16:00",
      "live_session_end": "20:00",
      "live_days": "monday,tuesday,wednesday",
      "course_code": null
    },
    {
      "id": 2,
      "title": "Web Development",
      "creator_id": 1,
      "description": "Build modern web applications.",
      "reference_file_path": "uploads\\ref_2_app.py",
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": null,
      "objectives": null,
      "created_at": "2025-07-30 10:47:23",
      "live_session_start": null,
      "live_session_end": null,
      "live_days": null,
      "course_code": null
    },
    {
      "id": 17,
      "title": "Machine Learning",
      "creator_id": 6,
      "description": "we will be learning",
      "reference_file_path": null,
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": "fundamentals\r\ntools\r\nspecilization\r\nsupervised learning",
      "objectives": "learn fundamentals\r\nlearn new tools\r\nlearn specializaiton\r\nlearn about supervised learning",
      "created_at": "2025-07-30 10:47:23",
      "live_session_start": null,
      "live_session_end": null,
      "live_days": null,
      "course_code": null
    },
    {
      "id": 18,
      "title": "Machine Learning 2",
      "creator_id": 1,
      "description": "we will be learning",
      "reference_file_path": "Uploads\\ref_18_db.py",
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": "fundamentals\r\ntools",
      "objectives": "learn fundamentals\r\nlearn about various tools",
      "created_at": "2025-07-30 10:47:23",
      "live_session_start": null,
      "live_session_end": null,
      "live_days": null,
      "course_code": null
    },
    {
      "id": 24,
      "title": "supervised learning 3",
      "creator_id": 1,
      "description": "we will be learning",
      "reference_file_path": null,
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": "fundamentals",
      "objectives": "learn fundamentals",
      "created_at": null,
      "live_session_start": "16:00",
      "live_session_end": "18:00",
      "live_days": "saturday,sunday",
      "course_code": "FY6MHD"
    },
    {
      "id": 25,
      "title": "supervised learning 3",
      "creator_id": 6,
      "description": "we will be learning about supervised learning",
      "reference_file_path": "Uploads\\ref_25_db.py",
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "outline": "fundamentals\r\ntools",
      "objectives": "learn fundamentals\r\nlearn about tools",
      "created_at": null,
      "live_session_start": "16:00",
      "live_session_end": "20:00",
      "live_days": "monday,saturday,sunday",
      "course_code": "797EN9"
    }
  ],
  "course_files": [
    {
      "id": 3,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 6,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 9,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 12,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 14,
      "course_id": 1,
      "filename": "db.py",
      "file_type": "text/x-python",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 15,
      "course_id": 1,
      "filename": "Python.mp4",
      "file_type": "video/mp4",
      "subtitle_path": "Uploads\\subtitle_1_15.srt",
      "chapter": 0
    },
    {
      "id": 16,
      "course_id": 1,
      "filename": "Research_Paper.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 17,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 18,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 19,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 20,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 21,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 22,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 25,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 26,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 27,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 28,
      "course_id": 17,
      "filename": "Python Programming_students (3).csv",
      "file_type": "text/csv",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 29,
      "course_id": 18,
      "filename": "Python Decorators in 1 Minute!.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 30,
      "course_id": 18,
      "filename": "Abstract (2).docx",
      "file_type": "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
      "subtitle_path": null,
      "chapter": 1
    },
    {
      "id": 31,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 32,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 33,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 34,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 35,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 36,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 39,
      "course_id": 1,
      "filename": "python_intro.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 40,
      "course_id": 1,
      "filename": "python_video.mp4",
      "file_type": "video/mp4",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 41,
      "course_id": 2,
      "filename": "html_guide.pdf",
      "file_type": "application/pdf",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 42,
      "course_id": 1,
      "filename": "pngtree-colorful-graduation-cap-logo-vector-png-image_15856291.png",
      "file_type": "image/png",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 43,
      "course_id": 1,
      "filename": "pngtree-colorful-graduation-cap-logo-on-a-white-background-vector-png-image_7226369.png",
      "file_type": "image/png",
      "subtitle_path": null,
      "chapter": 1
    },
    {
      "id": 44,
      "course_id": 24,
      "filename": "pngtree-colorful-graduation-cap-logo-vector-png-image_15856291.png",
      "file_type": "image/png",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 45,
      "course_id": 25,
      "filename": "pngtree-colorful-graduation-cap-logo-vector-png-image_15856291.png",
      "file_type": "image/png",
      "subtitle_path": null,
      "chapter": 0
    },
    {
      "id": 46,
      "course_id": 25,
      "filename": "pngtree-colorful-graduation-cap-logo-on-a-white-background-vector-png-image_7226369.png",
      "file_type": "image/png",
      "subtitle_path": null,
      "chapter": 1
    }
  ],
  "enrollments": [
    {
      "id": 1,
      "user_id": 2,
      "course_id": 1,
      "enrollment_number": "ENROLL001",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 2,
      "user_id": 3,
      "course_id": 1,
      "enrollment_number": "ENROLL002",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 3,
      "user_id": 2,
      "course_id": 2,
      "enrollment_number": "ENROLL003",
      "is_approved_by_instructor": 0,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 4,
      "user_id": 1,
      "course_id": 1,
      "enrollment_number": "EXPBRUEZ",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 7,
      "user_id": 1,
      "course_id": 2,
      "enrollment_number": "OYG5E6G4",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 10,
      "user_id": 2,
      "course_id": 17,
      "enrollment_number": "JYLZ0M7Z",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": -1
    },
    {
      "id": 11,
      "user_id": 7,
      "course_id": 1,
      "enrollment_number": "5MOQRYB0",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 12,
      "user_id": 8,
      "course_id": 1,
      "enrollment_number": "JJBC6QZ2",
      "is_approved_by_instructor": 1,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 13,
      "user_id": 1,
      "course_id": 18,
      "enrollment_number": "0I7XJ4YJ",
      "is_approved_by_instructor": 0,
      "enrollment_date": "2025-07-30 10:47:23",
      "approval_status": 0
    },
    {
      "id": 14,
      "user_id": 4,
      "course_id": 1,
      "enrollment_number": "1UJVDHL4",
      "is_approved_by_instructor": 0,
      "enrollment_date": null,
      "approval_status": 0
    },
    {
      "id": 15,
      "user_id": 6,
      "course_id": 1,
      "enrollment_number": "MDX1P2GB",
      "is_approved_by_instructor": 0,
      "enrollment_date": null,
      "approval_status": 0
    },
    {
      "id": 17,
      "user_id": 11,
      "course_id": 24,
      "enrollment_number": "EN849836",
      "is_approved_by_instructor": 0,
      "enrollment_date": null,
      "approval_status": 1
    },
    {
      "id": 18,
      "user_id": 12,
      "course_id": 24,
      "enrollment_number": "EN957906",
      "is_approved_by_instructor": 0,
      "enrollment_date": null,
      "approval_status": 1
    },
    {
      "id": 19,
      "user_id": 13,
      "course_id": 25,
      "enrollment_number": "EN786481",
      "is_approved_by_instructor": 0,
      "enrollment_date": null,
      "approval_status": 1
    }
  ],
  "threads": [
    {
      "id": 1,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-23 10:22:41",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 2,
      "course_id": 1,
      "title": "oop concepts",
      "creator_id": null,
      "created_at": "2025-07-26 08:21:32",
      "ext_url": null,
      "ext_type": null,
      "user_id": 1,
      "content": "what is inheritance"
    },
    {
      "id": 3,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-28 12:20:24",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 4,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-28 12:40:09",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 5,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-29 13:45:32",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 6,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-30 10:47:24",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 7,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-07-31 06:42:54",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    },
    {
      "id": 8,
      "course_id": 1,
      "title": "Python Syntax Questions",
      "creator_id": 2,
      "created_at": "2025-08-01 04:48:13",
      "ext_url": null,
      "ext_type": null,
      "user_id": null,
      "content": null
    }
  ],
  "posts": [
    {
      "id": 1,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-23 10:22:41",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 2,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-23 10:22:41",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 9,
      "thread_id": 2,
      "user_id": 1,
      "enrollment_number": "EXPBRUEZ",
      "content": "what is inheritance",
      "created_at": "2025-07-26 08:21:32",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 10,
      "thread_id": 2,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "what is encapsulation",
      "created_at": "2025-07-26 10:44:00",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 12,
      "thread_id": 2,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "what is polymorphism",
      "created_at": "2025-07-26 10:47:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 15,
      "thread_id": 2,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "what is overloading",
      "created_at": "2025-07-26 10:51:07",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 16,
      "thread_id": 2,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "what is overridding",
      "created_at": "2025-07-26 10:53:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 17,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-28 12:20:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 18,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-28 12:20:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 19,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-28 12:40:09",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 20,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-28 12:40:09",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 21,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-29 13:45:32",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 22,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-29 13:45:32",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 23,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-30 10:47:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 24,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-30 10:47:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 25,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-07-31 06:42:54",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 26,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-07-31 06:42:54",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 27,
      "thread_id": 1,
      "user_id": 2,
      "enrollment_number": "ENROLL001",
      "content": "Can someone explain list comprehensions?",
      "created_at": "2025-08-01 04:48:13",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 28,
      "thread_id": 1,
      "user_id": 3,
      "enrollment_number": "ENROLL002",
      "content": "Check the official Python docs for examples!",
      "created_at": "2025-08-01 04:48:13",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 30,
      "thread_id": 10,
      "user_id": 1,
      "enrollment_number": "B2OF9EN2",
      "content": "what is supervised learnin",
      "created_at": "2025-08-01 07:45:29",
      "ext_url": null,
      "ext_type": null
    }
  ],
  "progress": [
    {
      "id": 1,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": 80,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 2,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 3,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 4,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 5,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 6,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 7,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 8,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 9,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 10,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 11,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 12,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 13,
      "user_id": 1,
      "course_id": 1,
      "assignment_name": "test",
      "status": "submitted",
      "grade": null,
      "file_path": null,
      "ai_grade": 100,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 14,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 15,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 16,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 17,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 18,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 19,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 20,
      "user_id": 1,
      "course_id": 1,
      "assignment_name": "mcqs",
      "status": "submitted",
      "grade": null,
      "file_path": null,
      "ai_grade": 100,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 21,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 22,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 23,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 24,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": null
    },
    {
      "id": 25,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": null
    },
    {
      "id": 26,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": null
    },
    {
      "id": 27,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": 80,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": null
    },
    {
      "id": 28,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": null
    },
    {
      "id": 29,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": null
    },
    {
      "id": 30,
      "user_id": 2,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "submitted",
      "grade": null,
      "file_path": "assignment_uploads/2_1_Python_Quiz_1.pdf",
      "ai_grade": null,
      "created_at": null
    },
    {
      "id": 31,
      "user_id": 3,
      "course_id": 1,
      "assignment_name": "Python Quiz 1",
      "status": "completed",
      "grade": 85,
      "file_path": "assignment_uploads/3_1_Python_Quiz_1.py",
      "ai_grade": 80,
      "created_at": null
    },
    {
      "id": 32,
      "user_id": 2,
      "course_id": 2,
      "assignment_name": "HTML Assignment",
      "status": "incomplete",
      "grade": null,
      "file_path": null,
      "ai_grade": null,
      "created_at": null
    }
  ],
  "notes": [
    {
      "id": 2,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-23 10:22:41",
      "updated_at": "2025-07-23 10:22:41",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 4,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-23 11:13:25",
      "updated_at": "2025-07-23 11:13:25",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 6,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-23 11:33:11",
      "updated_at": "2025-07-23 11:33:11",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 7,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-23 11:46:11",
      "updated_at": "2025-07-23 11:46:11",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 8,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-23 11:46:11",
      "updated_at": "2025-07-23 11:46:11",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 9,
      "user_id": 1,
      "course_id": 1,
      "content": "i hate dependencies",
      "created_at": "2025-07-26 05:39:06",
      "updated_at": "2025-07-26 05:39:06",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 10,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-28 12:20:24",
      "updated_at": "2025-07-28 12:20:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 11,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-28 12:20:24",
      "updated_at": "2025-07-28 12:20:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 12,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-28 12:40:09",
      "updated_at": "2025-07-28 12:40:09",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 13,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-28 12:40:09",
      "updated_at": "2025-07-28 12:40:09",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 14,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-29 13:45:32",
      "updated_at": "2025-07-29 13:45:32",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 15,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-29 13:45:32",
      "updated_at": "2025-07-29 13:45:32",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 16,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-30 10:47:24",
      "updated_at": "2025-07-30 10:47:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 17,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-30 10:47:24",
      "updated_at": "2025-07-30 10:47:24",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 18,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-07-31 06:42:54",
      "updated_at": "2025-07-31 06:42:54",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 19,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-07-31 06:42:54",
      "updated_at": "2025-07-31 06:42:54",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 20,
      "user_id": 2,
      "course_id": 1,
      "content": "Python list comprehensions: [x*2 for x in range(10)] creates a list of doubled values.",
      "created_at": "2025-08-01 04:48:13",
      "updated_at": "2025-08-01 04:48:13",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 21,
      "user_id": 3,
      "course_id": 1,
      "content": "Remember to use virtual environments for Python projects.",
      "created_at": "2025-08-01 04:48:13",
      "updated_at": "2025-08-01 04:48:13",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 22,
      "user_id": 1,
      "course_id": 18,
      "content": "i hate dependencies",
      "created_at": "2025-08-01 07:41:54",
      "updated_at": "2025-08-01 07:41:54",
      "ext_url": null,
      "ext_type": null
    },
    {
      "id": 23,
      "user_id": 13,
      "course_id": 25,
      "content": "so encapsulating means to hide?",
      "created_at": "2025-08-04 04:27:06",
      "updated_at": "2025-08-04 04:27:06",
      "ext_url": null,
      "ext_type": null
    }
  ],
  "assignments": [
    {
      "id": 1,
      "course_id": 1,
      "name": "python test",
      "type": "mcq",
      "questions": "What is the output of print(2 ** 3)?\r\n\r\nWhich keyword is used to define a function in Python?\r\n\r\nWhat does the len() function return for a string?\r\n\r\nWhich of these is a mutable data type in Python?\r\n\r\nWhat is the correct syntax for a list comprehension?",
      "correct_answers": "8\r\n\r\ndef\r\n\r\nThe length of the string\r\n\r\nList\r\n\r\n[x for x in range(10)]",
      "due_date": "2025-07-27",
      "meeting_link": "https://colab.research.google.com/drive/15iVPxB6jh_f8gaIcmMxv0R455FTgKw-1#scrollTo=MNkF-ANcXak5",
      "chapter": 0,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 2,
      "course_id": 1,
      "name": "test",
      "type": "mcq",
      "questions": "what is oop\r\nwhat is inheritance\r\nwhat is abc\r\nwhat is internship",
      "correct_answers": "concept\r\ninheritance\r\nalphabet\r\nwork",
      "due_date": "2025-07-24",
      "meeting_link": "",
      "chapter": 0,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 3,
      "course_id": 1,
      "name": "mcqs",
      "type": "mcq",
      "questions": "[{\"question\": \"what is oop\", \"options\": [\"concept\", \"fruit\", \"vegetable\", \"flour\"], \"correct\": \"0\"}]",
      "correct_answers": "",
      "due_date": "2025-07-29",
      "meeting_link": null,
      "chapter": 0,
      "created_at": "2025-07-30 10:47:23"
    },
    {
      "id": 4,
      "course_id": 1,
      "name": "mcqs2",
      "type": "mcq",
      "questions": "[{\"question\": \"what is oop\", \"options\": [\"concept\", \"fruit\", \"vegetable\", \"flour\"], \"correct\": \"0\"}]",
      "correct_answers": "",
      "due_date": "2025-07-29",
      "meeting_link": null,
      "chapter": 0,
      "created_at": "2025-07-30 10:47:23"
    }
  ],
  "assignment_keywords": [],
  "notifications": [
    {
      "id": 1,
      "user_id": 2,
      "message": "You earned a badge: First Submission!",
      "link": null,
      "is_read": 0,
      "created_at": "2025-07-25 07:58:30",
      "course_id": null
    },
    {
      "id": 2,
      "user_id": 1,
      "message": "You earned a badge: First Submission!",
      "link": null,
      "is_read": 0,
      "created_at": "2025-07-25 14:20:32",
      "course_id": null
    },
    {
      "id": 3,
      "user_id": 2,
      "message": "Your assignment grade was updated in Python Programming",
      "link": "/course/1/progress",
      "is_read": 0,
      "created_at": "2025-07-31 07:14:09",
      "course_id": null
    },
    {
      "id": 4,
      "user_id": 2,
      "message": "Your assignment grade was updated in Python Programming",
      "link": "/course/1/progress",
      "is_read": 0,
      "created_at": "2025-07-31 07:14:09",
      "course_id": null
    },
    {
      "id": 5,
      "user_id": 2,
      "message": "Your assignment grade was updated in Python Programming",
      "link": "/course/1/progress",
      "is_read": 0,
      "created_at": "2025-07-31 07:15:02",
      "course_id": null
    },
    {
      "id": 6,
      "user_id": 2,
      "message": "Your assignment grade was updated in Python Programming",
      "link": "/course/1/progress",
      "is_read": 0,
      "created_at": "2025-07-31 07:15:02",
      "course_id": null
    }
  ],
  "resources_external": [
    {
      "id": 1,
      "course_id": 1,
      "title": "crash course",
      "url": "https://youtu.be/WEm3EUdicDg?si=8UB4L_6ODzBs31ob",
      "type": "youtube",
      "created_at": "2025-07-26 05:28:49",
      "transcript": "hi there and welcome to my python crash course on the new boston channel in this tutorial we'll be looking at the different types of syntax assigning variables looking at the different data types using numbers strings different boolean values operators different kinds of loops functions classes and even objects now for the stuff that i've just said made no sense to you then i challenge you to watch till the end of the tutorial and i assure you that by the end you'll have a great understanding of all of these topics [Music] also as you can probably imagine i put a lot of work and effort into making this tutorial it mean the world to me if you go ahead and subscribe to my channel it should be the first link in the description thanks so much for that and let's get right into it so let's start off with looking at comments now comments can be used to explain python code and they can also be used to make code more readable now comment always starts with a hash and python will ignore them whenever you try to run the script comments can be placed at either the tsar or the end of the line a comment does not have to be text to explain the code it can also be used to prevent python from just executing that bit of code now maybe you don't just want one line for a comment and you want multiple so instead of using this you could use triple quotes in your code as long as the string is not assigned to a variable python will read the code but then ignore it let's now have a look at how you can create a variable a variable is created the moment that you first assign a value to it for example here i'm going to say x equals to 10. so x is going to be the variable and 10 is going to be the value now if you go ahead and print out x it should respond with 10. now as i said earlier we can use variables to assign any type of data whether that be a number or even a word so let's go ahead and make a new variable and we're going to assign it to the string coding now if you go ahead and print out y this is the result that we get now that you know how to create a variable let's have a look at how you can change the type even after the type has been set now changing a type is as simple as making something from an integer to string or string to an integer if you want to specify the data type of a variable this can be done with casting so if you go ahead and say x equals a string and in brackets 10 then x will be 10 but in quotations and hence it will print out as a string now we can also go ahead and say y equals to the integer 3. now y will be 3 without any quotation in addition to that we can also say the z equals to flow in practice three all this does is it adds a decimal place to the end of three and hence the result three point zero let's now have a look at single or double quotes string variables can be declared either by using a single quote or a double let's have a look at what the difference is so if you go ahead and say x equals coding in double quotes and then we also go ahead and say y equals the coding in single quotations the output that we get here is actually going to be the exact same another key thing to take into consideration is the variable names are case sensitive for this one we're going to have a capital a and we're going to assign this value to python and now we're going to have a small a right below it and we're going to assign the value to variables let's now go ahead and print both of these out to see what we get as you can see here we get two different results this is because the capital a will not override the other let's now go ahead and look at data types now there are a lot of different types of built-in data types in programming data type is a very important concept variables can sort data of different types hence data types some of the data types are built into python are scr or string for text int or integer and flow for numeric types list tuple and range for sequence types as well as bool for brain types we'll be having a look at most of these in a bit more detail in just a second let's have a look at how you can get the data type so if you don't remember getting a data type can be done by using the type function here i'm going to go ahead and say x equals five i'm gonna go ahead and print out type x as you can see it tells us that x is an integer let's now have a look at numbers so there are two main numeric types in python int or integer and float variables of numeric types are created when you first assign a value to variables of numeric types are created when you assign a value to them now let's go ahead and say x equals 1 and y equals to 2.8 if you go ahead and print out the type for both x and y it tells us that x is an integer and y is a float int or integer is basically a whole number it can be positive or negative but it cannot have any decimals float on the other hand is a floating point number and it can be either positive or negative but it has to contain either one or more decimals let's now have a look at strings now strings in python are surrounded by angle quotations or double quotation marks hello in single quotation is the same as hello in double and you can display a string literal with the print function you can also assign a multi-aligned string to a variable by using three quotes as i showed you earlier we can also use three codes for making multi-line comments however when it's connected to a variable it's a value let's go ahead and just say a equals triple quote and some sample text in multi-lines as you can see when we print this out it prints out more than one line now again it doesn't matter if you use three single quotes or three double quotes they both still do output the same result like many other programming languages strings in python are arrays of bytes representing unicode characters however python doesn't actually have a character data type it's simply a string with a length of one square brackets can be used to access the elements of a string so we're going to go ahead and say a equals to hello world and we're going to go ahead and print out a then after the a we're gonna add in square brackets and say one in the middle now before i print this out try and have a go yourself to see what you get as you can see here it prints out the e that's because the first character actually has a position of zero and not one so if we did the same thing with zero instead of one then it would print out h instead you can also get the length of a string by using the len function to try this out we're gonna carry on with our example with a being hello world what we're gonna do is go ahead and say print then and then a in the middle this should go ahead and print out the length of the string in this case that's going to be 13. in let's now have a look at booleans in python number lines represent one or two values true or false in programming you often need to know if an expression is true or false now evaluating any expression in python will get you one of these two answers let's go ahead and compare two values python will return the boolean answer so let's go ahead and say print 10 is greater than 9 10 equals to 9 and 10 is smaller than 9 and the result that we get should be in this order 2 false and false because 10 is greater than 9 however the next two after that are false when you try and run a condition in an if statement python will again return either true or false we're going to go ahead and say a equals to 100 and b equals to 50. let's also say that if b is greater than a then print b is greater than a else print out b is not greater than a now if you don't really know how if or else statements work don't worry because we'll get onto that in just a second now the ball function actually allows you to evaluate any value it also gives you true or false in return for example let's go ahead and say print bull hello and we'll also say print bool 15. as you can see we got two outputs and they're both true because they're both valid statements now almost any value is evaluated to true it has some sort of content any string is true except for empty strings and any number is true except for zero any list tuple or even sets or all through except for the ones that have nothing in them so again we're going to go ahead and say bool and then we're going to say abc bool123 and bull a list of apple cherry and banana now we haven't really looked the list yet but we'll be looking at that in a second anyways the output here should all be true even though a lot of the values are true some are still false in fact there's really not that many values they value to false except for empty values the number zero and even the value of none and of course the value false also evaluates to false to have a look at all of this let's say ball false ball none bull zero ball quotations with nothing inside will brackets when nothing inside both square brackets but nothing inside and bull curly brackets with nothing died and yes you guessed it they're all false now functions can also return a boolean value but we're not going to dive into it right now just because we haven't done functions yet let's now have a look at python operators now operators are usable for operations on variables and values for example let's use the plus operator to add together two values we said print 10 plus 10. now addition isn't the only operator that you can use you could also have subtraction which is just minus multiplication which is an asterisk modulus which is going to be a percentage symbol python also has a lot of assignment operators how these work is x plus equal to 3 is going to be the same as x equals to x plus 3. x minus equals to 3 is the same as x equals x minus 3 and so on and so forth there's also comparison operators which give us boolean values as we said earlier these include equal 2 which is gonna be two equal signs next to each other greater than or equal to and even less than or equal to greater than or equal to which is going to be a greater than time with an equal to sign right next to it and less than or equal to which also follows the same principle as greater than let's now go ahead and have a look at python lists now lists are used to store multiple items in just a single variable list of one of the four built-in data types in python they're used to store collections of data the other three are tuples sets and dictionaries all of these have different qualities and usages list equates using square brackets let's go ahead and say list equals to square brackets apple banana oranges in the next line we can go ahead and print out our list and it gives us a pre-expected output now list items are ordered they can be changed and they also allow duplicate values items in list are also indexed the first item has an index of zero and the second item has an index of one when we say that the lists are in order it means that the items will have to have a defined order and that order will not change unless if you do it manually if you add new items to the list then your items will be placed at the end of the list since the lists are indexed you get multiple items with the same values we can go back to our list and we're going to add in apple and orange again at the end and when we print this out we get five different values to check how many items a list has use the lend function this is really helpful to help you print the number of the items in the list out if you go back to our list on the top we can go ahead and say print then and then list as you can see here prints out five now inside list you can have any data type whether that be a string an integer or even a boolean value let's now have a look at tuples now tuples are used to store multiple items in just a single variable and once again this is one of the four built-in data types that's used to store collections of data a tubal is a collection which is ordered however it's unchangeable which is why it differs from list and tubals are also written with round brackets instead of square let's go ahead and say tuple equals to again apple banana and orange when go ahead and print this out we get the expected output now as you know tuple items are ordered unchangeable but they do still allow duplicate values and again they are indexed so the first item has the index of zero the second is one the third is two and so on to work out the tuple length we can again use the link function and for this example we'll get three you can also create a tuple with only one item to do this you can go ahead and say this tuple equals apple but then we need a comma at the end otherwise python will not recognize it as a tuple and again just as list we can have any data type that we want let's now have a look at sets this is a third built in data type that can be used to store collections of data the sets are again used to store multiple items in just a single variable however a set is a collection which is unordered as well as on indexed and sets are written with curly brackets let's go ahead and say set equals to apple banana and orange now if you go ahead and print this out the result will be unordered this is because that's just don't have a defined order in addition to that they also can't have two items with the same value duplicate values here will be ignored so we go ahead and change our set variable to add an example at the end as you can see it simply just ignores it however again if you want to get the length of the set you can again use the len command and just like list and tuples you can have any data type now let's have a look at dictionaries this is the last function for drawing sets of data dictionaries are used to store data values and key to value pairs a dictionary is a collection which is ordered from python 3.7 if you're using a version from 3.6 earlier the dictionaries are on order but they are still changeable and they still don't allow any duplicates dryer dictionary you have to use curly brackets have keys they also lead into their values let's go ahead and create our first dictionary so we're going to say dictionary equals to brand it's going to be forward the model is going to be focused and the year is going to be 2010. when you go ahead and print this out it prints out exactly what we wrote but in just a single line now the items in this dictionary are ordered from python 3.7 changeable and they also do not allow any duplicates and as i said earlier dictionary item is also presented in key to value pairs and can be referred to by using the key name to print the brand value of the dictionary we go ahead and say print dictionary and in square brackets we have to give the exact name of the key which is going to be brown as you can see here it prints out forward we can also do this for the model as well as the year now just like says dictionaries also don't allow any duplicates so if we go ahead and try and say yeah it's 2021 then simply going to ignore the value have a look at the dictionary length again we can use the link function and for this example here we're going to get 3. let's now have a look at some conditional statements so we're going to go ahead and again say a equals to 100 and b equals to 200. now if b is greater than a then print out b is greater than a else printout a is greater than b now if you go ahead and run this it tells us that b is greater than a now python relies a lot of indentation now indentation is a white space in the beginning of the line so for example we get rid of the indentation in front of print we get an indentation error now in addition to this we can also use the alif keyword the lf keyword is python's way of saving if the previous conditions were not true then try this one so let's go ahead and change our value of b to 100 as well and we'll say l if a equals b then print a and b are both equal in this example a is equal to b so the first condition isn't true and hence python goes to the alif statement which is true and hence we get the result a and b are equal let's now have a look in while loops now python has two primitive loop commands one loops and four loops with a while loop we can execute a set of statements for as long a condition is true we're going to go ahead and say i equals 1 and we're going to say while y equals 1 print i as you can see this is going to go on forever because i is always going to be 1. let's now go ahead and change this loop up a bit and we're going to say that while i is less than six print i and also i plus equals to one if you don't remember what this does i equals i plus one when we run this we get one two three four and five before the loop stops we can also add in a break statement so we can go ahead and say if i equals to five then break as you can see here we only just go up to four because the loop breaks as soon as i is equal to five now opposite is a break statement it's a continue one so we're going to say if i equals to five then just continue we again get up to five we can also use the else statement with while so if we go ahead and get rid of the if i equals five statement then we can change that to say else print i is no longer less than six so still going to count all the way up to five let's have a look at some for loops now a for loop is used for iterating over a sequence this can either be a list a tuple a dictionary a set or even a string with the follow we can execute a set of statements one for each item in the list tuple dictionary or even a set so let's go ahead and make our first list we're going to say fruits equals apple banana and orange then let's say for x in fruits we're gonna go ahead and print out all the different foods in a different line even strings are iterable objects they all contain a sequence of characters to loop the letters through the word banana we go ahead and say for x in banana in quotations print x what it says is just prints banana but with all of his characters separated in six different lines we can also use break statements in for loops so if we go back to our statement in the first place we can say for x in fruits blueprint our x however if x equals the banana then break so what this is going to do is just going to print out apple banana and then the code is going to break if you move the if x equals banana pop above print x then it's only going to print out apple and then break now again just like the while loops we can also use the continue statement with for loops we can also use else in for loop so let's go ahead and say for x in fruits print x l sprint i'm done and as you can see it's gonna print out all the fruits in a different line and then it's going to say i'm done now follow-ups cannot actually be empty however if you put in a pass statement you can avoid getting an error now this can be used if you don't really have anything to put into the loop right now however you know that you're going to need it for later let's have a look now it functions a function is a block of code which only just runs when it's called you can pass data known as parameters into a function a function can then return data as a result now creating a function is really easy in python it's defined by using the def keyword we're going to go ahead and define function and inside the function we're going to say print hello i'm a function let's call the function we have to use the function name followed by parentheses so if we go ahead and say function and then the parentheses then it prints out hello i'm a function information can be passed into functions as arguments arguments are specified after this function name inside the parentheses you can add as many arguments as you want just try and separate them with a comma let's go ahead and make a new function we're going to define this function and call it name we're going to pass in the argument of name and when the function is called we're going to print out name now to actually give the function what it needs to print out we have to call the function and in the parentheses we have to put in the argument so here i'm going to call in the function and put in my name as you can see for the output it prints on my name now when you are calling function you need to call it with the correct number of arguments no more no less or else you will get a type error now python is an object oriented programming language almost everything in python is an object with its own properties and methods a class is like a blueprint for creating objects to create a class we use the keyword class let's go ahead and make our own class so let's say class my class and in there we're going to put in the variable x and the value of that is going to be 5. now let's go ahead and create an object we're going to say new equals my class and remember the parentheses let's go ahead and now print out new dot x and this shouldn't print out the value of the property that's named x but it's inside the class so that's how you can make a really basic class in python but now you can go a lot more advanced in that however for the sake of this tutorial i won't be doing that as they can get quite advanced so that's gonna be it for this video thank you so much for watching if you did enjoy don't forget to subscribe to my channel as well as the new boston's channel and also comment down below if you'd like to see more longer and comprehensive tutorials on python again thanks so much for watching i'll see you in the next one you",
      "chapter": 0
    },
    {
      "id": 2,
      "course_id": 18,
      "title": "crash course",
      "url": "https://youtu.be/WEm3EUdicDg?si=8UB4L_6ODzBs31ob",
      "type": "youtube",
      "created_at": "2025-08-01 07:39:20",
      "transcript": "hi there and welcome to my python crash course on the new boston channel in this tutorial we'll be looking at the different types of syntax assigning variables looking at the different data types using numbers strings different boolean values operators different kinds of loops functions classes and even objects now for the stuff that i've just said made no sense to you then i challenge you to watch till the end of the tutorial and i assure you that by the end you'll have a great understanding of all of these topics [Music] also as you can probably imagine i put a lot of work and effort into making this tutorial it mean the world to me if you go ahead and subscribe to my channel it should be the first link in the description thanks so much for that and let's get right into it so let's start off with looking at comments now comments can be used to explain python code and they can also be used to make code more readable now comment always starts with a hash and python will ignore them whenever you try to run the script comments can be placed at either the tsar or the end of the line a comment does not have to be text to explain the code it can also be used to prevent python from just executing that bit of code now maybe you don't just want one line for a comment and you want multiple so instead of using this you could use triple quotes in your code as long as the string is not assigned to a variable python will read the code but then ignore it let's now have a look at how you can create a variable a variable is created the moment that you first assign a value to it for example here i'm going to say x equals to 10. so x is going to be the variable and 10 is going to be the value now if you go ahead and print out x it should respond with 10. now as i said earlier we can use variables to assign any type of data whether that be a number or even a word so let's go ahead and make a new variable and we're going to assign it to the string coding now if you go ahead and print out y this is the result that we get now that you know how to create a variable let's have a look at how you can change the type even after the type has been set now changing a type is as simple as making something from an integer to string or string to an integer if you want to specify the data type of a variable this can be done with casting so if you go ahead and say x equals a string and in brackets 10 then x will be 10 but in quotations and hence it will print out as a string now we can also go ahead and say y equals to the integer 3. now y will be 3 without any quotation in addition to that we can also say the z equals to flow in practice three all this does is it adds a decimal place to the end of three and hence the result three point zero let's now have a look at single or double quotes string variables can be declared either by using a single quote or a double let's have a look at what the difference is so if you go ahead and say x equals coding in double quotes and then we also go ahead and say y equals the coding in single quotations the output that we get here is actually going to be the exact same another key thing to take into consideration is the variable names are case sensitive for this one we're going to have a capital a and we're going to assign this value to python and now we're going to have a small a right below it and we're going to assign the value to variables let's now go ahead and print both of these out to see what we get as you can see here we get two different results this is because the capital a will not override the other let's now go ahead and look at data types now there are a lot of different types of built-in data types in programming data type is a very important concept variables can sort data of different types hence data types some of the data types are built into python are scr or string for text int or integer and flow for numeric types list tuple and range for sequence types as well as bool for brain types we'll be having a look at most of these in a bit more detail in just a second let's have a look at how you can get the data type so if you don't remember getting a data type can be done by using the type function here i'm going to go ahead and say x equals five i'm gonna go ahead and print out type x as you can see it tells us that x is an integer let's now have a look at numbers so there are two main numeric types in python int or integer and float variables of numeric types are created when you first assign a value to variables of numeric types are created when you assign a value to them now let's go ahead and say x equals 1 and y equals to 2.8 if you go ahead and print out the type for both x and y it tells us that x is an integer and y is a float int or integer is basically a whole number it can be positive or negative but it cannot have any decimals float on the other hand is a floating point number and it can be either positive or negative but it has to contain either one or more decimals let's now have a look at strings now strings in python are surrounded by angle quotations or double quotation marks hello in single quotation is the same as hello in double and you can display a string literal with the print function you can also assign a multi-aligned string to a variable by using three quotes as i showed you earlier we can also use three codes for making multi-line comments however when it's connected to a variable it's a value let's go ahead and just say a equals triple quote and some sample text in multi-lines as you can see when we print this out it prints out more than one line now again it doesn't matter if you use three single quotes or three double quotes they both still do output the same result like many other programming languages strings in python are arrays of bytes representing unicode characters however python doesn't actually have a character data type it's simply a string with a length of one square brackets can be used to access the elements of a string so we're going to go ahead and say a equals to hello world and we're going to go ahead and print out a then after the a we're gonna add in square brackets and say one in the middle now before i print this out try and have a go yourself to see what you get as you can see here it prints out the e that's because the first character actually has a position of zero and not one so if we did the same thing with zero instead of one then it would print out h instead you can also get the length of a string by using the len function to try this out we're gonna carry on with our example with a being hello world what we're gonna do is go ahead and say print then and then a in the middle this should go ahead and print out the length of the string in this case that's going to be 13. in let's now have a look at booleans in python number lines represent one or two values true or false in programming you often need to know if an expression is true or false now evaluating any expression in python will get you one of these two answers let's go ahead and compare two values python will return the boolean answer so let's go ahead and say print 10 is greater than 9 10 equals to 9 and 10 is smaller than 9 and the result that we get should be in this order 2 false and false because 10 is greater than 9 however the next two after that are false when you try and run a condition in an if statement python will again return either true or false we're going to go ahead and say a equals to 100 and b equals to 50. let's also say that if b is greater than a then print b is greater than a else print out b is not greater than a now if you don't really know how if or else statements work don't worry because we'll get onto that in just a second now the ball function actually allows you to evaluate any value it also gives you true or false in return for example let's go ahead and say print bull hello and we'll also say print bool 15. as you can see we got two outputs and they're both true because they're both valid statements now almost any value is evaluated to true it has some sort of content any string is true except for empty strings and any number is true except for zero any list tuple or even sets or all through except for the ones that have nothing in them so again we're going to go ahead and say bool and then we're going to say abc bool123 and bull a list of apple cherry and banana now we haven't really looked the list yet but we'll be looking at that in a second anyways the output here should all be true even though a lot of the values are true some are still false in fact there's really not that many values they value to false except for empty values the number zero and even the value of none and of course the value false also evaluates to false to have a look at all of this let's say ball false ball none bull zero ball quotations with nothing inside will brackets when nothing inside both square brackets but nothing inside and bull curly brackets with nothing died and yes you guessed it they're all false now functions can also return a boolean value but we're not going to dive into it right now just because we haven't done functions yet let's now have a look at python operators now operators are usable for operations on variables and values for example let's use the plus operator to add together two values we said print 10 plus 10. now addition isn't the only operator that you can use you could also have subtraction which is just minus multiplication which is an asterisk modulus which is going to be a percentage symbol python also has a lot of assignment operators how these work is x plus equal to 3 is going to be the same as x equals to x plus 3. x minus equals to 3 is the same as x equals x minus 3 and so on and so forth there's also comparison operators which give us boolean values as we said earlier these include equal 2 which is gonna be two equal signs next to each other greater than or equal to and even less than or equal to greater than or equal to which is going to be a greater than time with an equal to sign right next to it and less than or equal to which also follows the same principle as greater than let's now go ahead and have a look at python lists now lists are used to store multiple items in just a single variable list of one of the four built-in data types in python they're used to store collections of data the other three are tuples sets and dictionaries all of these have different qualities and usages list equates using square brackets let's go ahead and say list equals to square brackets apple banana oranges in the next line we can go ahead and print out our list and it gives us a pre-expected output now list items are ordered they can be changed and they also allow duplicate values items in list are also indexed the first item has an index of zero and the second item has an index of one when we say that the lists are in order it means that the items will have to have a defined order and that order will not change unless if you do it manually if you add new items to the list then your items will be placed at the end of the list since the lists are indexed you get multiple items with the same values we can go back to our list and we're going to add in apple and orange again at the end and when we print this out we get five different values to check how many items a list has use the lend function this is really helpful to help you print the number of the items in the list out if you go back to our list on the top we can go ahead and say print then and then list as you can see here prints out five now inside list you can have any data type whether that be a string an integer or even a boolean value let's now have a look at tuples now tuples are used to store multiple items in just a single variable and once again this is one of the four built-in data types that's used to store collections of data a tubal is a collection which is ordered however it's unchangeable which is why it differs from list and tubals are also written with round brackets instead of square let's go ahead and say tuple equals to again apple banana and orange when go ahead and print this out we get the expected output now as you know tuple items are ordered unchangeable but they do still allow duplicate values and again they are indexed so the first item has the index of zero the second is one the third is two and so on to work out the tuple length we can again use the link function and for this example we'll get three you can also create a tuple with only one item to do this you can go ahead and say this tuple equals apple but then we need a comma at the end otherwise python will not recognize it as a tuple and again just as list we can have any data type that we want let's now have a look at sets this is a third built in data type that can be used to store collections of data the sets are again used to store multiple items in just a single variable however a set is a collection which is unordered as well as on indexed and sets are written with curly brackets let's go ahead and say set equals to apple banana and orange now if you go ahead and print this out the result will be unordered this is because that's just don't have a defined order in addition to that they also can't have two items with the same value duplicate values here will be ignored so we go ahead and change our set variable to add an example at the end as you can see it simply just ignores it however again if you want to get the length of the set you can again use the len command and just like list and tuples you can have any data type now let's have a look at dictionaries this is the last function for drawing sets of data dictionaries are used to store data values and key to value pairs a dictionary is a collection which is ordered from python 3.7 if you're using a version from 3.6 earlier the dictionaries are on order but they are still changeable and they still don't allow any duplicates dryer dictionary you have to use curly brackets have keys they also lead into their values let's go ahead and create our first dictionary so we're going to say dictionary equals to brand it's going to be forward the model is going to be focused and the year is going to be 2010. when you go ahead and print this out it prints out exactly what we wrote but in just a single line now the items in this dictionary are ordered from python 3.7 changeable and they also do not allow any duplicates and as i said earlier dictionary item is also presented in key to value pairs and can be referred to by using the key name to print the brand value of the dictionary we go ahead and say print dictionary and in square brackets we have to give the exact name of the key which is going to be brown as you can see here it prints out forward we can also do this for the model as well as the year now just like says dictionaries also don't allow any duplicates so if we go ahead and try and say yeah it's 2021 then simply going to ignore the value have a look at the dictionary length again we can use the link function and for this example here we're going to get 3. let's now have a look at some conditional statements so we're going to go ahead and again say a equals to 100 and b equals to 200. now if b is greater than a then print out b is greater than a else printout a is greater than b now if you go ahead and run this it tells us that b is greater than a now python relies a lot of indentation now indentation is a white space in the beginning of the line so for example we get rid of the indentation in front of print we get an indentation error now in addition to this we can also use the alif keyword the lf keyword is python's way of saving if the previous conditions were not true then try this one so let's go ahead and change our value of b to 100 as well and we'll say l if a equals b then print a and b are both equal in this example a is equal to b so the first condition isn't true and hence python goes to the alif statement which is true and hence we get the result a and b are equal let's now have a look in while loops now python has two primitive loop commands one loops and four loops with a while loop we can execute a set of statements for as long a condition is true we're going to go ahead and say i equals 1 and we're going to say while y equals 1 print i as you can see this is going to go on forever because i is always going to be 1. let's now go ahead and change this loop up a bit and we're going to say that while i is less than six print i and also i plus equals to one if you don't remember what this does i equals i plus one when we run this we get one two three four and five before the loop stops we can also add in a break statement so we can go ahead and say if i equals to five then break as you can see here we only just go up to four because the loop breaks as soon as i is equal to five now opposite is a break statement it's a continue one so we're going to say if i equals to five then just continue we again get up to five we can also use the else statement with while so if we go ahead and get rid of the if i equals five statement then we can change that to say else print i is no longer less than six so still going to count all the way up to five let's have a look at some for loops now a for loop is used for iterating over a sequence this can either be a list a tuple a dictionary a set or even a string with the follow we can execute a set of statements one for each item in the list tuple dictionary or even a set so let's go ahead and make our first list we're going to say fruits equals apple banana and orange then let's say for x in fruits we're gonna go ahead and print out all the different foods in a different line even strings are iterable objects they all contain a sequence of characters to loop the letters through the word banana we go ahead and say for x in banana in quotations print x what it says is just prints banana but with all of his characters separated in six different lines we can also use break statements in for loops so if we go back to our statement in the first place we can say for x in fruits blueprint our x however if x equals the banana then break so what this is going to do is just going to print out apple banana and then the code is going to break if you move the if x equals banana pop above print x then it's only going to print out apple and then break now again just like the while loops we can also use the continue statement with for loops we can also use else in for loop so let's go ahead and say for x in fruits print x l sprint i'm done and as you can see it's gonna print out all the fruits in a different line and then it's going to say i'm done now follow-ups cannot actually be empty however if you put in a pass statement you can avoid getting an error now this can be used if you don't really have anything to put into the loop right now however you know that you're going to need it for later let's have a look now it functions a function is a block of code which only just runs when it's called you can pass data known as parameters into a function a function can then return data as a result now creating a function is really easy in python it's defined by using the def keyword we're going to go ahead and define function and inside the function we're going to say print hello i'm a function let's call the function we have to use the function name followed by parentheses so if we go ahead and say function and then the parentheses then it prints out hello i'm a function information can be passed into functions as arguments arguments are specified after this function name inside the parentheses you can add as many arguments as you want just try and separate them with a comma let's go ahead and make a new function we're going to define this function and call it name we're going to pass in the argument of name and when the function is called we're going to print out name now to actually give the function what it needs to print out we have to call the function and in the parentheses we have to put in the argument so here i'm going to call in the function and put in my name as you can see for the output it prints on my name now when you are calling function you need to call it with the correct number of arguments no more no less or else you will get a type error now python is an object oriented programming language almost everything in python is an object with its own properties and methods a class is like a blueprint for creating objects to create a class we use the keyword class let's go ahead and make our own class so let's say class my class and in there we're going to put in the variable x and the value of that is going to be 5. now let's go ahead and create an object we're going to say new equals my class and remember the parentheses let's go ahead and now print out new dot x and this shouldn't print out the value of the property that's named x but it's inside the class so that's how you can make a really basic class in python but now you can go a lot more advanced in that however for the sake of this tutorial i won't be doing that as they can get quite advanced so that's gonna be it for this video thank you so much for watching if you did enjoy don't forget to subscribe to my channel as well as the new boston's channel and also comment down below if you'd like to see more longer and comprehensive tutorials on python again thanks so much for watching i'll see you in the next one you",
      "chapter": 0
    },
    {
      "id": 6,
      "course_id": 1,
      "title": "loops",
      "url": "https://youtu.be/94UHCEmprCY?si=yx3ZQ8zad6BbAuTm",
      "type": "youtube",
      "created_at": "2025-08-02 07:52:19",
      "transcript": "there are times that we may want to\nrepeat a task a number of times for example let's say we send a message to a\nuser if that message cannot be delivered perhaps we want to retry three times now\nfor simplicity let's imagine this print statement is equivalent to sending a\nmessage in a real work program to send a message to a user we have to write five\nto ten lines of code now if you want to retry three times we don't want to\nrepeat all that code that is ugly that's when we use a loop we use loops to\ncreate repetition so here is how it works we start with four number in we\nhave a built-in function called range now how many times we want to\nrepeat this task let's say three times so we call range and pass three as an\nargument now similar to our if statements we need to terminate this\nline with a colon enter we get indentation so in this block we can\nwrite all the statements that should be repeated three times let's do a print a\nmessage like attempt save the changes run the program so we have attempt\nprinted three times beautiful now what is this number let's take a look it's a\nvariable of type integer so let's pass it as the second argument to the print\nfunction number run the program this is what we get zero one two so here we have\na for loop this for loop is executed three times in each iteration number\nwill have a different value initially it will be zero in the second iteration it\nwill be one and finally in the last iteration it will be two now here we can\ndo something fun we can add one to this run the program and now the message is\nthat the print are kind of more meaningful or more user-friendly like\nattempting number one attempting number two and so on we can take this to the\nnext level so we can pass another argument here I'm going to add an\nexpression one more time number plus one so we'll get one\ntwo three now I want to put this expression in parenthesis so let's\nselect this put it in parenthesis and then multiply it by a dot so here we\nhave a string that is multiplied by a number the result will be that string\nrepeated that number of times let's take a look so run the program see that's\npretty cool isn't it now let me show you one more thing\nbefore you finish this lecture as you saw this range function generates\nnumbers starting from zero all the way up to this number here but it doesn't\ninclude this number here we can pass another argument say start from one and\nfinish before four with this change we don't need to add one to number every\ntime because in the first iteration this number variable will be set to one so we\ncan simplify our code and make it cleaner let's run it one more time we\nget the exact same result we can also pass a third argument as a step so I'm\ngoing to change the second argument to ten and pass two as a step look at the\nresult these are the numbers we get 1 3 5 and so on so pretty useful you're\ngoing to use this function a lot in real-world applications continuing with the example from the\nlast lecture let's imagine the scenario where after the first attempt we can\nsuccessfully send the message in that case you want to jump out of this loop\nwe don't want to repeat this task of sending a message three times let me\nshow you how to implement this so in this demo I'm gonna simulate the\nscenario where we can successfully send a message so we define a variable\nsuccessful and set it to true now here after this print statement\nwe'll have an if statement if successful : then perhaps we can print successful\nnow here we want to jump out of this loop for that we use the break statement\nlet's run this program and see what happens\nso there you go after the first attempt we are successful and there are no more\nattempts so once again I want you to pay great attention to the indentation here\nbecause that's one of the common issues amongst beginners so here's our for loop\nthese two lines are indented with four spaces and they belong to our for loop\nin every iteration these two lines will be executed now when we get to line four\nif this condition is true then these two lines will be executed because both\nthese lines are indented below this if statement now let's take this program to\nthe next level what if we attempt three times and we still cannot send an email\nperhaps we want to display a different message to the user we say hey we tried\nthree times but it didn't work so I'm gonna change successful to false now at\nthe end here we can add an else statement this is what we call a for\nelse statement what we put under this else statement will only be executed if\nthis loop completes without an early termination so if we never break out of\nthis loop then the else statement will be executed so here we can print a\nmessage like attempt at three times and failed so run\nthe program see what we get three attempts followed\nby this message attempted three times and failed in contrast if we change\nsuccessful to true because we terminate this loop using this break statement\nwhat we have in the else block will not be executed\ntake a look run the program we have one attempt successful done in programming we have this concept\ncalled nested loops so we can put one loop inside of another loop and with\nthis we can get some interesting results let me show you so I'm going to start\nwith this loop for X in range 5 : now inside of this loop I'm gonna add\nanother loop so for Y in range 3 : and then in our second loop I'm gonna\nadd a print statement here we can use formatted strings to display coordinates\nremember formatted string so we have F followed by quotes now here we add\nparentheses for our coordinate first we want to display X and then comma\nfollowed by Y let's run this program and see what happens there you go pretty\ncool isn't it so we get 0 + 0 0 1 0 & 2 then we get 1\n& 0 1 & 1 1 & 2 and so on now let me explain how exactly Python interpreter\nexecutes this code so here we have two loops this is what we call the outer\nloop and this is the inner loop so the execution of our program starts here in\nthe first iteration of this loop X is 0 now we get to this statement which is a\nchild of this for statement because it's indented four times this statement\nitself is a loop so what we have inside of this loop will be executed three\ntimes in the first iteration X is 0 because we're still in the first\niteration of the outer loop and Y is also 0 because we're in the first\niteration of the inner loop that is why we get 0 and 0 now we go to the second\niteration of this inner loop in this iteration Y will be 1 whereas X is still\n0 that is why we get 0 and 1 and similarly in the third iteration of our\ninner loop we'll get 0 and 2 in now we're done with the execution of the\ninner loop so the control moves back to our outer loop here we'll be in the\nsecond iteration so X will be 1 and then we start here again so we have to\nexecute this inner loop 3 times in the first iteration Y will be 0 and X is 1\nso here we have 1 and 0 then we'll get one on one and one and two you got the\npoint so this is all about nested loops so you have learned how to use four\nloops to repeat one or more statements in your programs now let's dive deeper\nand see what this range function returns so earlier you learn about the built in\ntype function with this function we can get the type of an object so if I pass\nfive here and run this program this is what we get so the type of this number\nor this object is int or integer now let's look at the type of the value that\nwe get from the range function so as an argument we pass range of a number let's\nrun this program so this range function returns an object of type range so in\nPython we have primitive types like numbers strings and boolean but we also\nhave complex types range is an example one of those complex types throughout\nthis course you're going to learn about a lot of other complex types now what is\ninteresting about this range object is that it's iterable which means we can\niterate over it or use it in a for loop that is why we can write code like this\nso this range function returns a range object which is eatable which means we\ncan iterate over it in each iteration X will have a different value now range\nobjects are not the only iterable objects in Python strings are also\niterable so here we can add a string like Python now in each iteration X will\nhold one character in this string let me show you so print\nPeg's and I'm gonna delete these two lines here let's run this program so in\neach iteration we'll get one character and print it we have another complex\ntype called list which we use to store a list of objects so we add square\nbrackets this indicates a list now we can add a list of numbers or a\nlist of strings like a list of names you will learn about lists later in the\ncourse so let's run this one more time as we can see we can iterate over lists\nin each iteration we'll get one object in this list now later in the course I\nwill show you how to create your own custom objects that are eatable for\nexample you will learn how to write code like this for item in shopping cart\nprint item so shopping cart is going to be a custom object that you will create\nit's not going to be an integer or a string or boolean it's a custom object\nit has a different structure and we'll make it eatable so we can use it in a\nfor loop and in each iteration we can get one item in the shopping cart and\nprint it on a terminal alright time for an exercise I want you\nto write a program to display the even numbers between 1 to 10 so when you run\nthis program you should see 2 4 6 and 8 and after these I want you to print this\nmessage we have 4 even numbers now here is a quick hint before you get started\nyou should call the range function with 1 and 10 do not use the third argument\nwhich is called step so basically I want you to iterate over all the numbers\nbetween 1 to 10 check if each number is an even number and then print it on the\nterminal so pause the video spend two minutes on this exercise when you're\ndone come back continue watching so it started with a four loop for a\nnumber in range one to ten : we check to see if the remainder of division of this\nnumber by two equals zero so if number modulus two equals zero\nthen we print this number now let's run this program so we get two\nfour six eight beautiful now to count the even numbers we need a separate\nvariable so let's call that count initially we set it to zero now in this\nif block every time we find an even number we need to increment count so we\nset count plus equals one and finally after our for loop we can print a\nformatted string we have count even numbers let's run the program and here's\nthe result hi guys thank you for watching this\ntutorial my name is Mohammad Ani and I have tons of tutorials like this for you\non my channel so be sure to subscribe and also please like and share this\nvideo if you want to learn Python properly from scratch with depth I have\na comprehensive Python tutorial for you the link is below this video so click\nthe link to get started thank you and have a fantastic day",
      "chapter": 1
    }
  ],
  "sqlite_sequence": [
    {
      "name": "badges",
      "seq": 2
    },
    {
      "name": "resources_external",
      "seq": 6
    }
  ],
  "lti_tools": [],
  "webhooks": [],
  "badges": [
    {
      "id": 1,
      "user_id": 2,
      "badge": "First Submission",
      "awarded_at": "2025-07-25 07:58:30"
    },
    {
      "id": 2,
      "user_id": 1,
      "badge": "First Submission",
      "awarded_at": "2025-07-25 14:20:32"
    }
  ],
  "chapter_progress": [
    {
      "user_id": 1,
      "course_id": 18,
      "chapter_idx": 0,
      "completed": 1
    }
  ]
}